/**
 * 2DConvolution.cu: This file is part of the PolyBench/GPU 1.0 test suite.
 *
 *
 * Contact: Scott Grauer-Gray <sgrauerg@gmail.com>
 * Louis-Noel Pouchet <pouchet@cse.ohio-state.edu>
 * Web address: http://www.cse.ohio-state.edu/~pouchet/software/polybench/GPU
 */

#include <unistd.h>
#include <stdio.h>
#include <time.h>
#include <sys/time.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <cuda.h>
#include <cuda_runtime.h>
#include <vector_types.h>
#include "polybenchUtilFuncts.h"
#include <omp.h>
#include <cuda_runtime.h>
//define the error threshold for the results "not matching"
#define PERCENT_DIFF_ERROR_THRESHOLD 0.05

#define GPU_DEVICE 0

/* Problem size */
#define NI 4096
#define NJ 4096
#define NJ_VECTOR NJ/2

#define NUM NI*NJ
#define NUM_VECTOR NUM/2
/* Thread block dimensions */
#define DIM_THREAD_BLOCK_X 1024
#define DIM_THREAD_BLOCK_Y 1

#define DIM_ROW (NJ/DIM_THREAD_BLOCK_X)       //4096/1024=4
#define DIM_COLUMN (NI/DIM_THREAD_BLOCK_Y)    //4096/1=4096
#define DIM_BLOCK DIM_ROW*DIM_COLUMN		  //4*4096=16384

#define NUM_SM 56
#define NUM_SM_COMPUTE 54
#define NUM_SM_HtoD 1 
#define OFFSET NUM_SM_HtoD * DIM_THREAD_BLOCK_X
#define NUM_SM_DtoH 1 

/* Can switch DATA_TYPE between float and double */
typedef double DATA_TYPE;


#define DUMMY_N 100

__device__ void dummy_comp()
{
    double sum = 0.0;
    for (int i = 0; i < DUMMY_N; i++) 
    {
        sum = sum + tan(0.1) * tan(0.1);
    }
}

void conv2D(DATA_TYPE* A, DATA_TYPE* B)
{
	int i, j;
	DATA_TYPE c11, c12, c13, c21, c22, c23, c31, c32, c33;

	c11 = +0.2;  c21 = +0.5;  c31 = -0.8;
	c12 = -0.3;  c22 = +0.6;  c32 = -0.9;
	c13 = +0.4;  c23 = +0.7;  c33 = +0.10;


	for (i = 1; i < NI - 1; ++i) // 0
	{
		for (j = 1; j < NJ - 1; ++j) // 1
		{
			B[i*NJ + j] = c11 * A[(i - 1)*NJ + (j - 1)]  +  c12 * A[(i + 0)*NJ + (j - 1)]  +  c13 * A[(i + 1)*NJ + (j - 1)]
				+ c21 * A[(i - 1)*NJ + (j + 0)]  +  c22 * A[(i + 0)*NJ + (j + 0)]  +  c23 * A[(i + 1)*NJ + (j + 0)] 
				+ c31 * A[(i - 1)*NJ + (j + 1)]  +  c32 * A[(i + 0)*NJ + (j + 1)]  +  c33 * A[(i + 1)*NJ + (j + 1)];
		}
	}
}



void init(DATA_TYPE* A)
{
	int i, j;

	for (i = 0; i < NI; ++i)
    	{
		for (j = 0; j < NJ; ++j)
		{
			A[i*NJ + j] = (float)rand()/RAND_MAX;
        	}
    	}
}


void compareResults(DATA_TYPE* B, DATA_TYPE* B_outputFromGpu)
{
	int i, j, fail;
	fail = 0;
	
	// Compare a and b
	for (i=1; i < (NI-1); i++) 
	{
		for (j=1; j < (NJ-1); j++) 
		{
			if (percentDiff(B[i*NJ + j], B_outputFromGpu[i*NJ + j]) > PERCENT_DIFF_ERROR_THRESHOLD) 
			{
				fail++;
			}
		}
	}
	
	// Print results
	printf("Non-Matching CPU-GPU Outputs Beyond Error Threshold of %4.2f Percent: %d\n", PERCENT_DIFF_ERROR_THRESHOLD, fail);
	
}


void GPU_argv_init()
{
	printf("setting device %d \n",0);
	cudaSetDevice( 0 );
}

__global__ void Convolution2D_kernel(DATA_TYPE *A_host, DATA_TYPE *B_host, DATA_TYPE *A, DATA_TYPE *B, int *inflag, int* outflag)
{

	if (blockIdx.x == 0 ){  //copy kernel HtoD

		const int idx = threadIdx.x;
		int rid = 0;
		int round =0;
		    
		for (int i = idx; i< NUM_VECTOR; i+= OFFSET){
		reinterpret_cast<double2*>(A)[i] = reinterpret_cast<double2*>(A_host)[i];	
		rid = i/2048;
		round = i/1024;
		//rid = __double2int_rd(   i / 2048 ) ;	//row id
		//round = __double2int_rd( i / 1024 ) ;	//round id	
		
	        	 if ( ( round & 1) == 1 ) {
				    //__threadfence();
				    __syncthreads();
				    if(threadIdx.x == 0){
					atomicExch(&inflag[rid],1);	
				    }
			    }
			}

	   //block HtoD finshed  
	   if (idx== 0){ 
	      atomicAdd(&outflag[0],-1);	
	     } 		     

	}else if (blockIdx.x <= NUM_SM_COMPUTE){     //compute 
			
			int bid = blockIdx.x-1+4;
			
			DATA_TYPE c11, c12, c13, c21, c22, c23, c31, c32, c33;

			c11 = +0.2;  c21 = +0.5;  c31 = -0.8;
			c12 = -0.3;  c22 = +0.6;  c32 = -0.9;
			c13 = +0.4;  c23 = +0.7;  c33 = +0.10;
		 	
			while( bid < (DIM_BLOCK -4) ){

				int i= bid / DIM_ROW;
				//i = __double2int_rd(bid / DIM_ROW);
				int j_base = bid % DIM_ROW;
				int j = j_base * DIM_THREAD_BLOCK_X + threadIdx.x;

				if(threadIdx.x==0)    //spin ....wait for data ready
					{
						while( ( inflag[i+1] == 0 ) )
						{
						//dummy_comp();
					        atomicCAS(&inflag[i+1],1,1);
						}
					//atomicAdd(&outflag[i],-1);
					}
				__syncthreads();

				if ((i < NI-1) && (j < NJ-1) && (i > 0) && (j > 0))
				{
					//compute for block bid
					B[i * NJ + j] =  c11 * A[(i - 1) * NJ + (j - 1)]  + c21 * A[(i - 1) * NJ + (j + 0)] + c31 * A[(i - 1) * NJ + (j + 1)] 
							+ c12 * A[(i + 0) * NJ + (j - 1)]  + c22 * A[(i + 0) * NJ + (j + 0)] +  c32 * A[(i + 0) * NJ + (j + 1)]
							+ c13 * A[(i + 1) * NJ + (j - 1)]  + c23 * A[(i + 1) * NJ + (j + 0)] +  c33 * A[(i + 1) * NJ + (j + 1)];
				}

				//make sure compute has been finished
				//__threadfence();
				__syncthreads();

				if(threadIdx.x==0)
				{
					atomicAdd(&outflag[i],1);
				}

				bid += NUM_SM_COMPUTE;
    		}		
		
		// compute block has finished
		if (threadIdx.x==0){
	         atomicAdd(&outflag[0],-2);	
		}

	}else{	//copy kernel DtoH
			
		 
		 const int idx = threadIdx.x;
		 // block DtoH starts
		 if (idx==0){
	         atomicAdd(&outflag[4095],-1);
	         }

		    for (int i = idx + NJ_VECTOR; i< NUM_VECTOR - NJ_VECTOR; i+= OFFSET){
				
				int rid;
				rid  = i / NJ_VECTOR;
						
				if(idx==0)    //spin ....wait for data ready
					{ 
						while( outflag[rid] != 4 )
						{
							//dummy_comp();
					        	atomicCAS(&outflag[rid],4,4);
						}
					}
				__syncthreads();
				reinterpret_cast<double2*>(B_host)[i] = reinterpret_cast<double2*>(B)[i];	

				if(idx ==0){
				atomicAdd(&outflag[rid],-1);
				}
				__syncthreads();
			    }
		//block DtoH finished
		if (idx==0){
	         atomicAdd(&outflag[4095],-1);
		}
	  }
}


void convolution2DCuda(DATA_TYPE* A, DATA_TYPE* B, DATA_TYPE* B_outputFromGpu)
{
	double t_start, t_end;

	DATA_TYPE *A_gpu;
	DATA_TYPE *B_gpu;

	int *inflag,*outflag;
	//alloc
	cudaMalloc((void **)&A_gpu, sizeof(DATA_TYPE) * NI * NJ);
	cudaMalloc((void **)&B_gpu, sizeof(DATA_TYPE) * NI * NJ);
	
	cudaMalloc((void **)&inflag,  sizeof(int) * NJ);
	cudaMalloc((void **)&outflag, sizeof(int) * NJ);

	//initial
	cudaMemset(inflag, 0, sizeof(int) * NJ);
	cudaMemset(outflag, 0, sizeof(int) * NJ);


	//create CUDA streams
        cudaStream_t streams[2];
        for (int i=0; i< 2; i++)
               cudaStreamCreate(&(streams[i]));

	//compute
	
	dim3 block(DIM_THREAD_BLOCK_X, DIM_THREAD_BLOCK_Y);
	dim3 grid((size_t)(NUM_SM), (size_t)1 );

	int tid;
	omp_set_num_threads(2);
	#pragma omp parallel private(tid)
	{
	tid = omp_get_thread_num();
	if (tid==0){ //compute thread
		fprintf(stdout,"thread %d launching the compute kernel\n",tid);
		t_start = rtclock();
		Convolution2D_kernel<<<grid,block,0,streams[0]>>>(A,B_outputFromGpu,A_gpu,B_gpu,inflag,outflag);
		cudaStreamSynchronize(streams[0]);
		t_end = rtclock();
		fprintf(stdout, "GPU Runtime: %0.6lfs\n", t_end - t_start);
	}else{  //debug thread
		fprintf(stdout,"thread %d starting to check the compute kernel\n",tid);
		int *inflag_h,*outflag_h;
		cudaHostAlloc((void **)&inflag_h, sizeof(int) * NJ, cudaHostAllocPortable);
		cudaHostAlloc((void **)&outflag_h, sizeof(int) * NJ, cudaHostAllocPortable);

		for (int j =0;j<300;j++){
			cudaMemcpyAsync(inflag_h,inflag,sizeof(int)*NJ, cudaMemcpyDeviceToHost,streams[1]);
			cudaMemcpyAsync(outflag_h,outflag,sizeof(int)*NJ, cudaMemcpyDeviceToHost,streams[1]);
			cudaStreamSynchronize(streams[1]);
			int totalin=0,totalout=0;
			for(int i=0;i<NJ;i++){
			totalin  += inflag_h[i];	
			totalout += outflag_h[i];	
			}
			
			fprintf(stdout,"input row 0:  %d \n",inflag_h[0]);
			fprintf(stdout,"input row 1:  %d \n",inflag_h[1]);
			fprintf(stdout,"input row 2:  %d \n",inflag_h[2]);
			fprintf(stdout,"input row 4093:  %d \n",inflag_h[4093]);
			fprintf(stdout,"input row 4094:  %d \n",inflag_h[4094]);
			fprintf(stdout,"input row 4095:  %d \n",inflag_h[4095]);

			fprintf(stdout,"output row 0:  %d \n",outflag_h[0]);
			fprintf(stdout,"output row 1:  %d \n",outflag_h[1]);
			fprintf(stdout,"output row 2:  %d \n",outflag_h[2]);
			fprintf(stdout,"output row 4093:  %d \n",outflag_h[4093]);
			fprintf(stdout,"output row 4094:  %d \n",outflag_h[4094]);
			fprintf(stdout,"output row 4095:  %d \n",outflag_h[4095]);

		}

	     }
	}
	cudaFree(A_gpu);
	cudaFree(B_gpu);
}




int main(int argc, char *argv[])
{
	double t_start, t_end;

	DATA_TYPE* A;
	DATA_TYPE* B;  
	DATA_TYPE* B_outputFromGpu;
	

	cudaHostAlloc((void **)&A, sizeof(DATA_TYPE) * NI * NJ, cudaHostAllocPortable);
	cudaHostAlloc((void **)&B, sizeof(DATA_TYPE) * NI * NJ, cudaHostAllocPortable);
	cudaHostAlloc((void **)&B_outputFromGpu, sizeof(DATA_TYPE) * NI * NJ, cudaHostAllocPortable);
	//initialize the arrays
	init(A);
	
	GPU_argv_init();
	

	convolution2DCuda(A, B, B_outputFromGpu);


	t_start = rtclock();
	conv2D(A, B);
	t_end = rtclock();
	fprintf(stdout, "CPU Runtime: %0.6lfs\n", t_end - t_start);
	
	compareResults(B, B_outputFromGpu);


	cudaFree(A);
	cudaFree(B);
	cudaFree(B_outputFromGpu);
	
	return 0;
}

